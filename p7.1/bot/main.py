import sqlite3
import telebot
import os
from telebot import types
from config import TKN
from datetime import datetime

bot = telebot.TeleBot(TKN)


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
db_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'bot', 'tests.db'))
conn = sqlite3.connect(db_path, check_same_thread=False)
cursor = conn.cursor()


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}
user_answers = {}
current_question = {}

# –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é
def set_main_menu():
    main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    main_menu.row(types.KeyboardButton('üìù –¢–µ—Å—Ç—ã'), types.KeyboardButton('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã'))
    main_menu.row(types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å'), types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
    return main_menu

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:",
        reply_markup=set_main_menu()
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (message.chat.id,))
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è </b>

üìù <b>–ö–∞–∫ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–¢–µ—Å—Ç—ã"
2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–µ—Å—Ç
3. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞

üìä <b>–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</b>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫
"""
    bot.send_message(message.chat.id, help_text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    if message.text == 'üìù –¢–µ—Å—Ç—ã':
        show_tests(message.chat.id)
    elif message.text == 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã':
        show_results_menu(message.chat.id)
    elif message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        send_help(message)
    elif message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        show_settings(message.chat.id)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
        if message.chat.id in user_state and user_state[message.chat.id] == 'answering':
            process_answer(message)

# –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
def show_settings(chat_id):
    settings_markup = types.InlineKeyboardMarkup()
    settings_markup.add(
        types.InlineKeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")
    )
    bot.send_message(chat_id, "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:</b>", reply_markup=settings_markup, parse_mode='HTML')

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
def show_tests(chat_id):
    cursor.execute("SELECT test_id, test_name FROM tests")
    tests = cursor.fetchall()
    
    if not tests:
        bot.send_message(chat_id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
        return
    
    markup = types.InlineKeyboardMarkup()
    for test in tests:
        markup.add(types.InlineKeyboardButton(text=test[1], callback_data=f"test_{test[0]}"))
    
    bot.send_message(chat_id, "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:</b>", reply_markup=markup, parse_mode='HTML')

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def show_results_menu(chat_id):
    cursor.execute('''
    SELECT r.result_id, t.test_name, r.score, r.total_questions, r.timestamp 
    FROM results r
    JOIN tests t ON r.test_id = t.test_id
    WHERE r.user_id = ?
    ORDER BY r.timestamp DESC
    ''', (chat_id,))
    
    results = cursor.fetchall()
    
    if not results:
        bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤.")
        return
    
    markup = types.InlineKeyboardMarkup()
    for result in results:
        date_str = datetime.strptime(result[4], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
        markup.add(types.InlineKeyboardButton(
            text=f"{result[1][:20]} - {result[2]}/{result[3]} ({date_str})",
            callback_data=f"result_{result[0]}"
        ))
    
    bot.send_message(chat_id, "üìä <b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>", reply_markup=markup, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data.startswith("test_"):
        test_id = int(call.data.split("_")[1])
        start_test(call.message.chat.id, test_id)
    elif call.data.startswith("result_"):
        result_id = int(call.data.split("_")[1])
        show_result_details(call.message.chat.id, result_id)
    elif call.data.startswith("settings_"):
        handle_settings(call)
    elif call.data == "back_to_results":
        show_results_menu(call.message.chat.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def handle_settings(call):
    setting = call.data.split("_")[1]
    if setting == "notifications":
        bot.answer_callback_query(call.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")


# –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
def start_test(chat_id, test_id):
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    cursor.execute("SELECT question_id, question_text FROM questions WHERE test_id = ? ORDER BY question_id", (test_id,))
    questions = cursor.fetchall()
    
    if not questions:
        bot.send_message(chat_id, "–í —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state[chat_id] = 'answering'
    user_answers[chat_id] = {
        'test_id': test_id,
        'questions': questions,
        'current_question': 0,
        'answers': [],
        'score': 0
    }
    
    # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    ask_question(chat_id)

# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
def ask_question(chat_id):
    user_data = user_answers[chat_id]
    question_id, question_text = user_data['questions'][user_data['current_question']]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
    current_question[chat_id] = question_id
    
    bot.send_message(
        chat_id, 
        f"‚ùì <b>–í–æ–ø—Ä–æ—Å {user_data['current_question'] + 1}:</b>\n\n{question_text}",
        parse_mode='HTML',
        reply_markup=types.ForceReply(selective=False)
    )

# –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç
def process_answer(message):
    chat_id = message.chat.id
    user_answer = message.text.strip()
    question_id = current_question[chat_id]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    cursor.execute("SELECT correct_answer FROM questions WHERE question_id = ?", (question_id,))
    correct_answer = cursor.fetchone()[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    is_correct = user_answer.lower() == correct_answer.lower()
    if is_correct:
        user_answers[chat_id]['score'] += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answers[chat_id]['answers'].append({
        'question_id': question_id,
        'user_answer': user_answer,
        'is_correct': is_correct
    })
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    user_answers[chat_id]['current_question'] += 1
    
    if user_answers[chat_id]['current_question'] < len(user_answers[chat_id]['questions']):
        ask_question(chat_id)
    else:
        finish_test(chat_id)

# –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
def finish_test(chat_id):
    user_data = user_answers[chat_id]
    test_id = user_data['test_id']
    score = user_data['score']
    total_questions = len(user_data['questions'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    cursor.execute(
        "INSERT INTO results (user_id, test_id, score, total_questions) VALUES (?, ?, ?, ?)",
        (chat_id, test_id, score, total_questions)
    )
    result_id = cursor.lastrowid
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for answer in user_data['answers']:
        cursor.execute(
            "INSERT INTO user_answers (result_id, question_id, user_answer, is_correct) VALUES (?, ?, ?, ?)",
            (result_id, answer['question_id'], answer['user_answer'], int(answer['is_correct']))
        )
    
    conn.commit()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_state[chat_id]
    del user_answers[chat_id]
    del current_question[chat_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    bot.send_message(
        chat_id,
        f"üéâ <b>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}/{total_questions}</b>",
        parse_mode='HTML',
        reply_markup=set_main_menu()
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
def show_result_details(chat_id, result_id):
    cursor.execute('''
    SELECT t.test_name, r.score, r.total_questions, r.timestamp
    FROM results r
    JOIN tests t ON r.test_id = t.test_id
    WHERE r.result_id = ?
    ''', (result_id,))
    
    test_info = cursor.fetchone()
    
    cursor.execute('''
    SELECT q.question_text, q.correct_answer, ua.user_answer, ua.is_correct
    FROM user_answers ua
    JOIN questions q ON ua.question_id = q.question_id
    WHERE ua.result_id = ?
    ORDER BY q.question_id
    ''', (result_id,))
    
    questions = cursor.fetchall()
    
    date_str = datetime.strptime(test_info[3], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
    
    message = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:</b> {test_info[0]}\n"
    message += f"üìÖ <b>–î–∞—Ç–∞:</b> {date_str}\n"
    message += f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> {test_info[1]}/{test_info[2]}\n"
    message += f"üìà <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {round(test_info[1]/test_info[2]*100)}%\n\n"
    message += "<b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b>\n\n"
    
    for i, question in enumerate(questions, 1):
        status = "‚úÖ" if question[3] else "‚ùå"
        message += f"{i}. {question[0]}\n"
        message += f"   –í–∞—à –æ—Ç–≤–µ—Ç: {question[2]} {status}\n"
        message += f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question[1]}\n\n"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results"))
    
    bot.send_message(chat_id, message, parse_mode='HTML', reply_markup=markup)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()